plugins {
    id "java"
    id "maven-publish"
    id "org.embulk.embulk-plugins" version "0.4.2"
    id "com.diffplug.spotless" version "5.15.0"
    id "com.palantir.git-version" version "0.12.3"
}
repositories {
    mavenCentral()
}

group = "io.trocco"
description = "An embulk output plugin to egest records as json via http/https."
version = {
    def vd = versionDetails()
    if (vd.commitDistance == 0 && vd.lastTag ==~ /^[0-9]+\.[0-9]+\.[0-9]+(\.[a-zA-Z0-9]+)?/) {
        vd.lastTag
    } else {
        "0.0.0.${vd.gitHash}"
    }
}()

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    def embulkVersion = "0.10.33"
    compileOnly "org.embulk:embulk-api:${embulkVersion}"
    compileOnly "org.embulk:embulk-spi:${embulkVersion}"

    compile "org.embulk:embulk-util-config:0.3.0"
    compile "org.embulk:embulk-util-json:0.1.1"
    compile "org.embulk:embulk-util-timestamp:0.2.1"
    compile "javax.validation:validation-api:1.1.0.Final"
    compile "org.apache.bval:bval-jsr303:0.5"

    compile "org.embulk:embulk-base-restclient:0.10.1"
    compile("org.embulk:embulk-util-retryhelper-jaxrs:0.8.1") {
        exclude group: "org.slf4j", module: "slf4j-api"
    }
    compile "org.glassfish.jersey.core:jersey-client:3.0.3"

    testImplementation "junit:junit:4.+"
    testImplementation "org.embulk:embulk-core:${embulkVersion}"
    testImplementation "org.embulk:embulk-deps:${embulkVersion}"
}

embulkPlugin {
    mainClass = "org.embulk.output.http_json.HttpJsonOutputPlugin"
    category = "output"
    type = "http_json"
}
publishing {
    publications {
        embulkPluginMaven(MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url = "${project.buildDir}/mavenPublishLocal"
        }
    }
}
gem {
    from("LICENSE.txt")
    authors = [ "Civitaspo" ]
    email = [ "civitaspo@gmail.com" ]
    summary = "An embulk output plugin to egest records as json via http/https."
    homepage = "https://github.com/trocco-io/embulk-output-http_json"
    licenses = [ "MIT" ]
}
spotless {
    java {
        importOrder()
        removeUnusedImports()
        googleJavaFormat().aosp()
    }
}
